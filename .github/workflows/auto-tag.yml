name: Auto Tag on Version Bump

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      created: ${{ steps.detect.outputs.created }}
      tag: ${{ steps.detect.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create tag if version changed
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          NEW_VERSION=$(node -p "require('./package.json').version")
          TAG="v${NEW_VERSION}"
          echo "New version: ${NEW_VERSION}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          git fetch --tags --quiet
          if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
            echo "Tag ${TAG} already exists. Skipping."
            echo "created=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          OLD_JSON=$(git show HEAD^:package.json 2>/dev/null || echo "")
          if [ -n "${OLD_JSON}" ]; then
            OLD_VERSION=$(printf "%s" "${OLD_JSON}" | node -e "let s='';process.stdin.on('data',d=>s+=d).on('end',()=>{try{console.log(JSON.parse(s).version||'')}catch(e){console.log('')}})")
          else
            OLD_VERSION=""
          fi
          echo "Old version: ${OLD_VERSION}"
          if [ "${OLD_VERSION}" = "${NEW_VERSION}" ]; then
            echo "Version not changed. Skipping."
            echo "created=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "${TAG}" -m "release ${TAG}"
          git push origin "${TAG}"
          echo "created=true" >> "$GITHUB_OUTPUT"

  release-windows:
    needs: tag
    if: needs.tag.outputs.created == 'true'
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ELECTRON_BUILDER_GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Configure npm
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 120000
          npm cache clean --force
      - name: Get npm cache dir
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> "$GITHUB_OUTPUT"
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install deps (retry with mirror fallback)
        shell: bash
        run: |
          set -e
          for i in 1 2 3; do
            if npm install --no-fund --no-audit; then
              exit 0
            fi
            echo "npm install attempt ${i} failed; retrying..."
            sleep 5
          done
          echo "primary registry failed; switching to mirror"
          npm config set registry https://registry.npmmirror.com
          npm cache clean --force
          npm install --no-fund --no-audit --force
      - name: Build renderer
        run: npm run build
      - name: Build and publish
        run: npx --yes electron-builder --publish always